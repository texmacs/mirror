
(virtual-font
  (simeq (stack-equal (hor-scale sim minus) minus))
  (cong (stack-equal (hor-scale sim =) =))
  (approxeq (stack-equal (hor-scale approx minus) minus))
  (triplesim (with ym (- (height approx) (height sim))
               (with yp (- 0 ym)
                 (align (join (0 ym sim) sim (0 yp sim)) = * 0.5))))
  (smile smile*)
  (frown frown*)
  (thicksim (join (0 -0.015 sim) sim (0 0.015 sim)))
  (thickapprox (join (0 -0.015 approx) approx (0 0.015 approx)))
  (asymp (with d (- (sep-equal) (* 0.5 (frac-width)))
           (align (stack (hor-scale smile* =) (hor-scale frown* =) d)
                  = * 0.5)))
  (asympasymp
    (stack-equal (stack-equal (hor-scale (bottom-crop smile*) minus) minus)
                 (hor-scale (top-crop frown*) minus)))
  (simsim
    (stack-equal (stack-equal (hor-scale sim minus) minus)
                 (hor-scale sim minus)))

  (neq (negate = slash2))
  (nequiv (negate equiv slash3))
  (nsim (negate sim slash1))
  (napprox (negate approx slash2))
  (ntriplesim (negate triplesim slash3))
  (nsimeq (negate simeq slash2))
  (ncong (negate cong slash3))
  (napproxeq (negate approxeq slash3))
  (nasymp (negate asymp slash2))
  (nasympasymp (negate asympasymp slash3))
  (nsimsim (negate simsim slash3))

  (horbar (align minus M * 0.5))
  (Horbar (align = M * 0.5))
  (verbar (align (scale vminus M * 1) M * 0.5))
  (vdash (with m (/ (+ (sep-equal) (width minus)) (width minus))
           (left-fit (magnify horbar m *) verbar 0.5)))
  (vdash* (align (left-crop (left-fit horbar verbar 0.5))
                 (left-crop verbar) 0 *))
  (Vdash (with d (+ (sep-equal) (width verbar))
           (join verbar (d 0 vdash*))))
  (Vvdash (with d1 (+ (sep-equal) (width verbar))
            (with d2 (* 2 d1)
              (join verbar (d1 0 verbar) (d2 0 vdash*)))))
  (vDash (with m (/ (+ (sep-equal) (width minus)) (width minus))
           (left-fit (magnify Horbar m *) verbar 0.5)))
  (vDash* (align (left-crop (left-fit Horbar verbar 0.5))
                 (left-crop verbar) 0 *))
  (VDash (with d (+ (sep-equal) (width verbar))
           (join verbar (d 0 vDash*))))
  (VvDash (with d1 (+ (sep-equal) (width verbar))
            (with d2 (* 2 d1)
              (join verbar (d1 0 verbar) (d2 0 vDash*)))))
  (dashv (hor-flip vdash))
  (dashV (hor-flip Vdash))
  (dashVv (hor-flip Vvdash))
  (Dashv (hor-flip vDash))
  (DashV (hor-flip VDash))
  (DashVv (hor-flip VvDash))
  (nvdash (with d (+ (sep-equal) (width verbar))
            (join (reslash (crop slash) (crop vdash)) (d 0 vdash))))
  (ndashv (with d (+ (sep-equal) (width verbar))
            (join dashv (d 0 (reslash (crop slash) (crop dashv))))))
  (nVdash (with d (+ (sep-equal) (width verbar))
            (join (reslash (crop slash) (crop Vdash)) (d 0 Vdash))))
  (ndashV (with d (+ (sep-equal) (width verbar))
            (join dashV (d 0 (reslash (crop slash) (crop dashV))))))
  (nVvdash (with d (+ (sep-equal) (width verbar))
             (join (reslash (crop slash) (crop Vvdash)) (d 0 Vvdash))))
  (ndashVv (with d (+ (sep-equal) (width verbar))
             (join dashVv (d 0 (reslash (crop slash) (crop dashVv))))))
  (nvDash (with d (+ (sep-equal) (width verbar))
            (join (reslash (crop slash) (crop vDash)) (d 0 vDash))))
  (nDashv (with d (+ (sep-equal) (width verbar))
            (join Dashv (d 0 (reslash (crop slash) (crop Dashv))))))
  (nVDash (with d (+ (sep-equal) (width verbar))
            (join (reslash (crop slash) (crop VDash)) (d 0 VDash))))
  (nDashV (with d (+ (sep-equal) (width verbar))
            (join DashV (d 0 (reslash (crop slash) (crop DashV))))))
  (nVvDash (with d (+ (sep-equal) (width verbar))
             (join (reslash (crop slash) (crop VvDash)) (d 0 VvDash))))
  (nDashVv (with d (+ (sep-equal) (width verbar))
             (join DashVv (d 0 (reslash (crop slash) (crop DashVv)))))))
